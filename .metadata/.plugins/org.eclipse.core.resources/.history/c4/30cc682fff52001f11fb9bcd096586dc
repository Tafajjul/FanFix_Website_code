package tests;


import java.awt.AWTException;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import io.github.bonigarcia.wdm.WebDriverManager;
import pages.LoginPage;
import pages.NewPostPage;

public class TestFanfix {
    public WebDriver driver;
    public LoginPage loginPage;
    public NewPostPage newPostPage;

    @BeforeClass
    public void setUp() {
    	 WebDriverManager.chromedriver().setup();
    	 ChromeOptions options = new ChromeOptions();
    	 
    	 options.addArguments("--remote-allow-origins=*","ignore-certificate-errors");
    	// options.addArguments("--remote-allow-origins=*.,"ignore-certificate-errors");
    	
    	 
    	 
         // Commenting out headless mode for debugging purposes
         // options.addArguments("--headless");
        // options.addArguments("--disable-gpu");
        // options.addArguments("--no-sandbox");
        // options.addArguments("--disable-dev-shm-usage");
        // options.addArguments("--incognito");
         driver = new ChromeDriver(options);
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
        loginPage = new LoginPage(driver);
        newPostPage = new NewPostPage(driver);
    }

    @SuppressWarnings("deprecation")
	@Test(priority = 1)
    public void loginWebsite() throws InterruptedException, AWTException {
        // Step 1: Login
        driver.get("https://client-auth-dev.fanfix.dev/login");
        driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
        loginPage.login("testqa@mailinator.com", "123456789");
    }
       
 // Step 2: Navigate to New Post (assuming the URL or element interaction for navigation)
        @Test(priority=2)
     
        public void newPostButton() throws InterruptedException
        {
        	
        newPostPage.clickNewPostButton();
        }

     // Step 3: Write the Post Caption
        @Test(priority=3)
        public void writePost() throws InterruptedException
        {
        newPostPage.writePostCaption("This post is done by automation assignment");
        }

        // Step 4: Add Media
       // @Test(priority=4)
          public void clickPlusIconToAddMedia()
        {
        	newPostPage.clickPlusIcon();
        }
       // @Test(priority=5)
        public void addMediaa() throws InterruptedException, AWTException 
        {
        String filePath = "D:\\yt thumbnail.jpg";
        newPostPage.addMedia(filePath);
        }
        	
       
        @Test(priority=6)
        
        public void selectAndAddMedia() throws InterruptedException
        {
        	newPostPage.selectImageToUpload();
        }
        @Test(priority=7)
        public void selectCustomButton() throws InterruptedException
        {
        	newPostPage.clickCustomButton();
        	
        	
        }
        @Test(priority=8)
        public void verifyTheCustomAmount() throws InterruptedException
        {
        	// Set custom prices and verify the Post button state
            newPostPage.setCustomPrices("5", "5");
            Assert.assertTrue(newPostPage.isPostButtonEnabled(), "Post button should be enabled for amount 5 or more");
            System.out.println("Verification 1: New Post Button is enable for amount 5");
            Thread.sleep(1000);
        	// Loop through different amounts and check the Post button status
			
			for (int i = 1; i <= 6; i++) {
				String amount = String.valueOf(i);
				
				newPostPage.setCustomPrices(amount, amount);
				System.out.println("Verification"+amount);
				if (i < 5) {
					boolean b= newPostPage.isPostButtonEnabled();
					System.out.println(b);
					Assert.assertFalse(newPostPage.isPostButtonEnabled(),
							"Post button should be disabled for amount less than 5");
				} else {
					boolean b= newPostPage.isPostButtonEnabled();
					System.out.println(b);
					Assert.assertTrue(newPostPage.isPostButtonEnabled(),
							"Post button should be enabled for amount 5 or more");
				}
			}
		
        
        // Step 7: Click Post Button
       // newPostPage.clickPostButton();

        // Step 8: Add assertions to verify post creation
        // This would typically involve checking for a confirmation message or post visibility
    }

    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}

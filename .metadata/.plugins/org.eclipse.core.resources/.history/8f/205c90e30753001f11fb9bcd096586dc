package pages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

public class NewPostPage extends BasePage {

	@FindBy(xpath = "//button[@data-testid='pill-button-new-post-ds']")
    WebElement newPost;
	
    @FindBy(xpath = "//div[@data-testid=\"post-caption-input-c\"]/.//div/.//textarea[@placeholder=\"What's on your mind?\"]")
    WebElement postCaptionField;

    @FindBy(xpath = "//div[@data-testid='media-stack-upload-c']")
    WebElement plusIcon;

    @FindBy(xpath = "//button[@data-testid='pill-button-upload-media-ds']")
    WebElement uploadMediaButton;

    @FindBy(xpath = "//div[@class='filepond--wrapper']/.//div/.//div/.//span[.=' Browse ']")
    WebElement browseButton;

    @FindBy(xpath= "//button[.='Continue']")
    WebElement continueButton;

    
    //select the media and click on add media button
    @FindBy(xpath= "//div[@class='MuiStack-root css-1ex1g4g']/.//div[@class='image-item MuiBox-root css-0'][1]")
    WebElement selectImage;
    
    @FindBy(xpath= "//button[@data-testid='pill-button-add-media-ds']")
    WebElement addMediaButton2;
    
    
    @FindBy(xpath= "(//p[.='Custom'])[1]")
    WebElement customSubs;

    @FindBy(xpath= "(//p[.='Custom'])[2]")
    WebElement customNonSubs;
    
    @FindBy(xpath= "(//input[@id='custom-sub'])[1]")
    WebElement customSubsInput;
  
    @FindBy(xpath= "(//input[@id='custom-sub'])[2]")
    WebElement customNonSubsInput;

    @FindBy(xpath= "//button[@data-testid='pill-button-post-to-profile-ds']")
    WebElement postButton;
    
    @FindBy(xpath= "//table[@class='MuiTable-root desktop-table has-actions css-14swh2w']")
    WebElement userTable;
    
    @FindBy(xpath= "//table[@class='MuiTable-root desktop-table has-actions css-14swh2w']/tbody/tr")
    List<WebElement> tableRows;

    public NewPostPage(WebDriver driver) {
        super(driver);
    }

    public void clickNewPostButton() throws InterruptedException
    {
    	WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[@data-testid='pill-button-new-post-ds']")));
        
    	newPost.click();
    	Thread.sleep(3000);
    }
    public void writePostCaption(String caption) throws InterruptedException {
    	postCaptionField.click();
        postCaptionField.sendKeys(caption);
        Thread.sleep(3000);
    }

    public void clickPlusIcon(){
    	JavascriptExecutor ja=(JavascriptExecutor)driver;
    	ja.executeScript("arguments[0].scrollIntoView();", plusIcon);
        plusIcon.click();
        uploadMediaButton.click();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@class='filepond--wrapper']/.//div/.//div/.//span[.=' Browse ']")));
        element.click();
       // ja.executeScript("arguments[0].click();", browseButton);
       // browseButton.click();
    }
    
    public void addMedia(String filePath) throws InterruptedException, AWTException {
        StringSelection upload= new StringSelection(filePath);
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(upload, null);
		Thread.sleep(3000);
		Robot r= new Robot();
		r.keyPress(KeyEvent.VK_CONTROL);
	    r.keyPress(KeyEvent.VK_V);
	    r.keyPress(KeyEvent.VK_TAB);
	    r.keyPress(KeyEvent.VK_TAB);
	    r.keyPress(KeyEvent.VK_ENTER);
	    r.keyRelease(KeyEvent.VK_CONTROL);
	    r.keyRelease(KeyEvent.VK_V);
	    r.keyRelease(KeyEvent.VK_TAB);
	    r.keyRelease(KeyEvent.VK_TAB);
	    r.keyRelease(KeyEvent.VK_ENTER);
        
       // browseButton.sendKeys(filePath);
	    driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        continueButton.click();
        Thread.sleep(3000);
    }
    
    public void selectImageToUpload() throws InterruptedException
    {
    	selectImage.click();
    	addMediaButton2.click();
    	Thread.sleep(3000);
    }
    public void clickCustomButton() throws InterruptedException
    {
     customSubs.click();
     customNonSubs.click();
     Thread.sleep(5000);
    }

    public void setCustomPrices(String subscriptionPrice, String nonSubscriptionPrice) throws InterruptedException {
    	customSubsInput.click();
    	customSubsInput.sendKeys(Keys.CONTROL + "a");
    	customSubsInput.sendKeys(Keys.DELETE);
    	customSubsInput.sendKeys(subscriptionPrice);
    	Thread.sleep(1000);
    	
    	customNonSubsInput.click();
    	customNonSubsInput.sendKeys(Keys.CONTROL + "a");
    	customNonSubsInput.sendKeys(Keys.DELETE);
    	customNonSubsInput.sendKeys(nonSubscriptionPrice);
    	Thread.sleep(1000);
    }

	 
    
//verify the post button is disable when the amount is less than 5.
    public boolean isPostButtonEnabled() {
        return postButton.isEnabled();
    }

    public void clickPostButton() {
        postButton.click();
        
        
    }
    public String clickPostProfileButtonTime() {
        LocalDateTime clickTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy h:mm a");
        return clickTime.format(formatter);
    }
    
    public boolean isPostCreated() {
        WebDriverWait wait = new WebDriverWait(driver, 20);
        wait.until(ExpectedConditions.visibilityOf(userTable));

       // List<WebElement> tableRows = userTable.findElements(By.tagName("tr"));

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMM dd, yyyy h:mm a");
   
        for (int i = 1; i <= tableRows.size() - 1; i++) {

			WebElement date = driver
					.findElement(By.xpath("//table[@class='MuiTable-root desktop-table has-actions css-14swh2w']/tbody/tr[" + i + "]/td[2]"));

			String text = date.getText();
			System.out.println(text);
			
			 String clickTime = clickPostProfileButtonTime();
			 System.out.println(clickTime);
			//LocalDateTime postDateTime = LocalDateTime.parse(postDateTimeString, formatter);
        if (text.contains(clickTime))
        		{
        	Assert.assertEquals(text,clickTime);
        		}
        else
        {}
        
        /*for (WebElement row : tableRows) {
            List<WebElement> columns = row.findElements(By.tagName("td"));
            if (columns.size() > 0) {
                String postText = columns.get(0).getText();  // Adjust index as needed
                String postDateTimeString = columns.get(1).getText();  // Adjust index as needed
                if (postText.contains(caption)) {
                    try {
                        LocalDateTime postDateTime = LocalDateTime.parse(postDateTimeString, formatter);
                        if (postDateTime.isAfter(expectedTime.minusMinutes(1)) && postDateTime.isBefore(expectedTime.plusMinutes(1))) {
                            return true;
                        }
                    } catch (DateTimeParseException e) {
                        e.printStackTrace();
                    }
                }*/
            }
        }
        return false;
    }
    }
    
}